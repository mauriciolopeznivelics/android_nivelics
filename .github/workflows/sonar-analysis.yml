# GitHub Actions Workflow for Android Projects with SonarQube Integration
# Alternative to GitLab CI/CD pipeline with same functionality

name: Android CI/CD with SonarQube

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  # Android SDK Configuration
  ANDROID_COMPILE_SDK: 34
  ANDROID_BUILD_TOOLS: 34.0.0
  
  # SonarQube Configuration
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  # Build Job - Compile Android Project
  build:
    name: Build Android Project
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: |
        echo "🔨 Building Android project..."
        ./gradlew clean assembleDebug --stacktrace
        echo "✅ Build completed successfully"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          app/build/outputs/
          app/build/intermediates/
        retention-days: 1

  # Test Job - Execute Unit Tests and Generate Coverage
  test:
    name: Run Tests and Generate Coverage
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: app/build/
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run unit tests
      run: |
        echo "🧪 Running unit tests..."
        ./gradlew testDebugUnitTest --stacktrace
        echo "✅ Unit tests completed"
    
    - name: Generate JaCoCo coverage report
      run: |
        echo "📊 Generating JaCoCo coverage report..."
        ./gradlew testDebugUnitTestCoverage --stacktrace
        echo "✅ Coverage report generated"
    
    - name: Run Android Lint
      run: |
        echo "🔍 Running Android Lint..."
        ./gradlew lintDebug --stacktrace
        echo "✅ Lint analysis completed"
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          app/build/reports/jacoco/testDebugUnitTestCoverage/
          app/build/reports/tests/
          app/build/reports/lint-results*.xml
          app/build/test-results/
        retention-days: 1
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Android Test Results
        path: app/build/test-results/testDebugUnitTest/TEST-*.xml
        reporter: java-junit

  # SonarQube Analysis Job
  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [build, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Disable shallow clone for better analysis
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: app/build/
    
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results
        path: app/build/
    
    - name: Cache SonarQube packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: Update GitHub Status - Analysis Started
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'pending',
            target_url: '${{ env.SONAR_HOST_URL }}',
            description: 'SonarQube analysis in progress...',
            context: 'SonarQube Analysis'
          });
    
    - name: SonarQube Scan
      run: |
        echo "🔍 Starting SonarQube analysis..."
        
        # Install SonarQube Scanner
        wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
        unzip -q sonar-scanner-cli-4.8.0.2856-linux.zip
        export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin
        
        # Run analysis
        sonar-scanner \
          -Dsonar.projectKey=android_app \
          -Dsonar.projectName=AndroidApp \
          -Dsonar.projectVersion=${{ github.sha }} \
          -Dsonar.sources=app/src/main/java,app/src/main/kotlin \
          -Dsonar.tests=app/src/test/java,app/src/test/kotlin \
          -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
          -Dsonar.login=${{ env.SONAR_TOKEN }} \
          -Dsonar.coverage.jacoco.xmlReportPaths=app/build/reports/jacoco/testDebugUnitTestCoverage/testDebugUnitTestCoverage.xml \
          -Dsonar.android.lint.report=app/build/reports/lint-results-debug.xml \
          -Dsonar.java.binaries=app/build/intermediates/javac,app/build/tmp/kotlin-classes \
          -Dsonar.branch.name=${{ github.ref_name }}
        
        echo "✅ SonarQube analysis completed"
    
    - name: Update GitHub Status - Analysis Completed
      if: success()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'success',
            target_url: '${{ env.SONAR_HOST_URL }}',
            description: 'SonarQube analysis completed successfully',
            context: 'SonarQube Analysis'
          });
    
    - name: Update GitHub Status - Analysis Failed
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'failure',
            target_url: '${{ env.SONAR_HOST_URL }}',
            description: 'SonarQube analysis failed',
            context: 'SonarQube Analysis'
          });

  # Quality Gate Validation Job
  quality-gate:
    name: Quality Gate Validation
    runs-on: ubuntu-latest
    needs: sonar-analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Update GitHub Status - Quality Gate Checking
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'pending',
            target_url: '${{ secrets.SONAR_HOST_URL }}',
            description: 'Checking Quality Gate status...',
            context: 'SonarQube Quality Gate'
          });
    
    - name: Wait for Quality Gate
      id: quality-gate-check
      run: |
        echo "⏳ Waiting for Quality Gate result..."
        
        # Use the quality gate check script
        chmod +x scripts/quality-gate-check.sh
        
        # Capture exit code to determine success/failure
        if ./scripts/quality-gate-check.sh; then
          echo "quality_gate_status=success" >> $GITHUB_OUTPUT
          echo "quality_gate_description=Quality Gate passed - Code meets quality standards" >> $GITHUB_OUTPUT
        else
          echo "quality_gate_status=failure" >> $GITHUB_OUTPUT
          echo "quality_gate_description=Quality Gate failed - Code does not meet quality standards" >> $GITHUB_OUTPUT
          exit 1
        fi
      env:
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    - name: Update GitHub Status - Quality Gate Success
      if: success()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'success',
            target_url: '${{ secrets.SONAR_HOST_URL }}',
            description: '${{ steps.quality-gate-check.outputs.quality_gate_description }}',
            context: 'SonarQube Quality Gate'
          });
    
    - name: Update GitHub Status - Quality Gate Failed
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'failure',
            target_url: '${{ secrets.SONAR_HOST_URL }}',
            description: 'Quality Gate failed - Code does not meet quality standards',
            context: 'SonarQube Quality Gate'
          });
          
          // Fail the job to prevent merge
          core.setFailed('Quality Gate failed - merge blocked');

  # Deploy Job - Only runs if Quality Gate passes
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "🚀 Quality Gate passed! Proceeding with deployment..."
        echo "📱 Deploying Android application to production..."
        echo "✅ Deployment completed successfully!"
        echo "🎉 Application deployed with high code quality standards!"
    
    - name: Notify deployment success
      run: |
        echo "📧 Sending deployment notification..."
        echo "✅ Production deployment successful for commit ${{ github.sha }}"

  # Deploy to Staging (for develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📱 Staging deployment completed!"
        echo "🔗 Staging URL: https://staging.example.com"